// <auto-generated />
using System;
using HotelManagement.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelManagement.Migrations
{
    [DbContext(typeof(HotelManagementDbContext))]
    [Migration("20250530101347_FoodAvailability")]
    partial class FoodAvailability
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventUsers", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsersId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventUsers", (string)null);

                    b.HasData(
                        new
                        {
                            UsersId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            EventsId = new Guid("5a6da81a-74a0-4d50-8cac-fea2f7897731")
                        },
                        new
                        {
                            UsersId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd292"),
                            EventsId = new Guid("5a6da81a-74a0-4d50-8cac-fea2f7897731")
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.ActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("ActivityRecords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a31"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Date = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 101 cleaning",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a32"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            Date = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 102 maintenance",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Status = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a33"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            Date = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 102 cleaning",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Status = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31b77411-fae4-407c-8e20-4c3fc64bbe7a",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3a3ZyaPwUEzIYhitdjjXx4B6hkKft71U28bA8j2xwaUQJKI3028ayxFx2UURvwkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd291",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd292"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74a0e490-db95-4b04-8fbc-5ea4fb283dfc",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEDebyobsy5Xt4fcrKuLuxnMikO0EpE92RPn9+rwiDD+TtB4v6EKdsQ3clc1KRsf+Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd292",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e871fd0-d015-45a4-9f40-bb17b577c62e",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAELS6U5JwjQfaqB3Umq7B40WuDt/fsPTV2pm1LTu8g8UBvABln3fsXfg8UNEI0Q/VrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd293",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611901"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            EndDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611902"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            EndDate = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a6da81a-74a0-4d50-8cac-fea2f7897731"),
                            Capacity = 0,
                            Date = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A night of nostalgia with classic hits.",
                            Name = "Oldies Party"
                        },
                        new
                        {
                            Id = new Guid("6b7da81a-74a0-4d50-8cac-fea2f7897732"),
                            Capacity = 0,
                            Date = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoy a relaxing evening with smooth jazz.",
                            Name = "Jazz Night"
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45811"),
                            Description = "Delicious cheese pizza with fresh toppings.",
                            IsAvailable = true,
                            Name = "Pizza",
                            Price = 12.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            Description = "Juicy beef burger with lettuce and tomato.",
                            IsAvailable = true,
                            Name = "Burger",
                            Price = 8.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45813"),
                            Description = "Creamy Alfredo pasta with grilled chicken.",
                            IsAvailable = true,
                            Name = "Pasta Alfredo",
                            Price = 10.99m
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.FoodOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("FoodOrders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2961"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Description = "Order 1",
                            OrderDate = new DateTime(2025, 5, 30, 13, 13, 47, 1, DateTimeKind.Local).AddTicks(3321),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2962"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Description = "Order 2",
                            OrderDate = new DateTime(2025, 5, 30, 13, 13, 47, 3, DateTimeKind.Local).AddTicks(6791),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Status = 2
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.JoinEntities.FoodOrderFood", b =>
                {
                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("FoodId", "FoodOrderId");

                    b.HasIndex("FoodOrderId");

                    b.ToTable("FoodOrderFoods", (string)null);

                    b.HasData(
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45811"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2961"),
                            Quantity = 2
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2961"),
                            Quantity = 1
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45813"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2962"),
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FoodId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7291"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Excellent service and clean room!",
                            Rating = 9,
                            ReviewDate = new DateTime(2025, 5, 30, 13, 13, 47, 4, DateTimeKind.Local).AddTicks(9044),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21")
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7292"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Pretty decent pizza",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45811"),
                            Rating = 7,
                            ReviewDate = new DateTime(2025, 5, 30, 13, 13, 47, 4, DateTimeKind.Local).AddTicks(9526)
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7293"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Average experience, could be better.",
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 5, 30, 13, 13, 47, 4, DateTimeKind.Local).AddTicks(9543),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22")
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7294"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Great burger, will order again!",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            Rating = 8,
                            ReviewDate = new DateTime(2025, 5, 30, 13, 13, 47, 4, DateTimeKind.Local).AddTicks(9548)
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Description = "Room 101",
                            RoomNumber = "101",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Description = "Room 102",
                            RoomNumber = "102",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b52")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca23"),
                            Description = "Room 103",
                            RoomNumber = "103",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b53")
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51"),
                            Capacity = 1,
                            Description = "A cozy room for one person",
                            Name = "Single",
                            Price = 50.0m
                        },
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b52"),
                            Capacity = 2,
                            Description = "Comfortable for two guests",
                            Name = "Double",
                            Price = 90.0m
                        },
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b53"),
                            Capacity = 4,
                            Description = "Luxury suite with extra amenities",
                            Name = "Suite",
                            Price = 160.0m
                        },
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b54"),
                            Capacity = 6,
                            Description = "Spacious room for families",
                            Name = "Family",
                            Price = 220.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b11"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b12"),
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b13"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b14"),
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b11")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd292"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b13")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b14")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomBookings", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("RoomBookings", (string)null);

                    b.HasData(
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611901"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611901"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611902"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21")
                        });
                });

            modelBuilder.Entity("EventUsers", b =>
                {
                    b.HasOne("HotelManagement.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManagement.Models.ActivityRecord", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ActivityRecords")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Room", "Room")
                        .WithMany("ActivityRecords")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Models.Booking", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Bookings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HotelManagement.Models.FoodOrder", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FoodOrders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Room", "Room")
                        .WithMany("FoodOrders")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Models.JoinEntities.FoodOrderFood", b =>
                {
                    b.HasOne("HotelManagement.Models.Food", "Food")
                        .WithMany("FoodOrderFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.FoodOrder", "FoodOrder")
                        .WithMany("FoodOrderFoods")
                        .HasForeignKey("FoodOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodOrder");
                });

            modelBuilder.Entity("HotelManagement.Models.Review", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Food", "Food")
                        .WithMany("Reviews")
                        .HasForeignKey("FoodId");

                    b.HasOne("HotelManagement.Models.Room", "Room")
                        .WithMany("Reviews")
                        .HasForeignKey("RoomId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Food");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Models.Room", b =>
                {
                    b.HasOne("HotelManagement.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomBookings", b =>
                {
                    b.HasOne("HotelManagement.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManagement.Models.ApplicationUser", b =>
                {
                    b.Navigation("ActivityRecords");

                    b.Navigation("Bookings");

                    b.Navigation("FoodOrders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelManagement.Models.Food", b =>
                {
                    b.Navigation("FoodOrderFoods");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelManagement.Models.FoodOrder", b =>
                {
                    b.Navigation("FoodOrderFoods");
                });

            modelBuilder.Entity("HotelManagement.Models.Room", b =>
                {
                    b.Navigation("ActivityRecords");

                    b.Navigation("FoodOrders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelManagement.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
