// <auto-generated />
using System;
using HotelManagement.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelManagement.Migrations
{
    [DbContext(typeof(HotelManagementDbContext))]
    [Migration("20250607170420_FixedSeeds")]
    partial class FixedSeeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventStaff", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventStaff", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            EventId = new Guid("5a6da81a-74a0-4d50-8cac-fea2f7897731")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            EventId = new Guid("7c8da81a-74a0-4d50-8cac-fea2f7897733")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd298"),
                            EventId = new Guid("8d9da81a-74a0-4d50-8cac-fea2f7897734")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            EventId = new Guid("9e0da81a-74a0-4d50-8cac-fea2f7897735")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd298"),
                            EventId = new Guid("9e0da81a-74a0-4d50-8cac-fea2f7897735")
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.ActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("ActivityRecords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a31"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Date = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 101 cleaning",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Status = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a32"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            Date = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 102 maintenance",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Status = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a33"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            Date = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 102 cleaning",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Status = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a34"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            Date = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 101 minibar restock",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Status = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a35"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd298"),
                            Date = new DateTime(2025, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 104 cleaning",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca24"),
                            Status = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a36"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            Date = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 106 maintenance check",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca26"),
                            Status = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("db1ae6ab-91a7-4aaf-a08a-4097ce670a37"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd294"),
                            Date = new DateTime(2025, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Room 107 cleaning",
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca27"),
                            Status = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b5d7130-e66c-4b6d-aa20-1cada7e27029",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2gWULBYd/PHP5JpOfMrXH5tYdu1VtluWCaWAYmO5ngXM7oNXDY4gAsTOUOb0iBbw==",
                            PhoneNumber = "+421 987 654 321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd291",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd292"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6c416c2-5edc-4558-82cf-f240a521aefa",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            LastName = "Novák",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEI8dpxw3lTP71SOn/U2QlGnkiXs5UcEpv0iDJ1HRlFMO1UZ4XB8j2ccIhmGceEklQw==",
                            PhoneNumber = "+421 912 345 678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd292",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e79dad2-54cd-4372-a465-e73c82b153ff",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Laura",
                            LastName = "Kalniņa",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEEBTYZ97K1Exisz+6NVy/0zb0DeJbOOfoovJMZR5DJ8BP8OYWKh9jJnpBkasKKSxmA==",
                            PhoneNumber = "+371 29876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd293",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd294"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f8044f6-2dda-4490-adf5-a0e14631900d",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tomáš",
                            LastName = "Kováč",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAED95wf78k5PJRAF/JJRPpK0uAONk/+077GmljDH9f4SRisDtu/SpwVo8oRJF1cxlsg==",
                            PhoneNumber = "+421 903 222 111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd294",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd295"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "682c4fb1-91f3-41a8-b4d2-ce6e7395c05c",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elīna",
                            LastName = "Ozoliņa",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqP8lUC4X8D8jfaQqp17pxximvWtH2VVmj6vTI669PQgemA+eL3RgP7Dw3pH0yQtg==",
                            PhoneNumber = "+371 26443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd295",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac6234eb-6a87-43ef-8d78-456c9d327fa9",
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            FirstName = "Marek",
                            LastName = "Horváth",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEB21X8Y6Fil8i4yQnEix33jHFzE5exOSoSc9DlwQGFPW72eQdCRbF0eJhYf3G0o0TA==",
                            PhoneNumber = "+421 944 321 987",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd296",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ad80b9f-4c09-4af7-9af7-468add145bf8",
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            FirstName = "Rihards",
                            LastName = "Bērziņš",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEEgDhST5VX8ReS3ydoikh1ulzwrP6eKWdoATGBkrDDKbttxQe+AovObRMEhnbdlnyQ==",
                            PhoneNumber = "+371 27773311",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd297",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd298"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e856f694-c348-40ce-8af1-1a135164acb3",
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            FirstName = "Zuzana",
                            LastName = "Šimková",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEEANCRoDlmEoAqUbX4j5FGB7OnxJyFedKq3vGmYPnz3hVchN7AD8K4FZPuW3meZ1/Q==",
                            PhoneNumber = "+421 905 888 777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd298",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd299"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99c63e66-9fe6-4343-8e4c-cc5994ab4cca",
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jozef",
                            LastName = "Mrkva",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFhbyBLNcN1m34UxV8/vWhC/TDriHp99Q2KBD9B4udAMSSiZxIzvX3RlTxkKApn4A==",
                            PhoneNumber = "+421 905 888 197",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd299",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd29a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3a82077-e198-4ab0-9415-072d3bb627c7",
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            FirstName = "Milan",
                            LastName = "Bobor",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7U3xuC786n0pgdsNmoUkKPDNxzL6BbAaTBCbdUdV9xYnnxFcOtv0XsXcovwkBBrQ==",
                            PhoneNumber = "+421 905 888 712",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67019a3d-04de-444b-bb6c-6ef934dcd29a",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611901"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            EndDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611902"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            EndDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611903"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            EndDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611904"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            EndDate = new DateTime(2024, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611905"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            EndDate = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611906"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            EndDate = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("371c096d-5c0b-4929-aab5-1c0289611907"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            EndDate = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a6da81a-74a0-4d50-8cac-fea2f7897731"),
                            Capacity = 0,
                            Date = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A night of nostalgia with classic hits.",
                            Name = "Oldies Party"
                        },
                        new
                        {
                            Id = new Guid("6b7da81a-74a0-4d50-8cac-fea2f7897732"),
                            Capacity = 0,
                            Date = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoy a relaxing evening with smooth jazz.",
                            Name = "Jazz Night"
                        },
                        new
                        {
                            Id = new Guid("7c8da81a-74a0-4d50-8cac-fea2f7897733"),
                            Capacity = 0,
                            Date = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sample exquisite wines from around the world.",
                            Name = "Wine Tasting Evening"
                        },
                        new
                        {
                            Id = new Guid("8d9da81a-74a0-4d50-8cac-fea2f7897734"),
                            Capacity = 0,
                            Date = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An evening of laughs with stand-up comedians.",
                            Name = "Live Comedy Show"
                        },
                        new
                        {
                            Id = new Guid("9e0da81a-74a0-4d50-8cac-fea2f7897735"),
                            Capacity = 0,
                            Date = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Join us for a summer BBQ party by the pool.",
                            Name = "Poolside BBQ Bash"
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45811"),
                            Description = "Delicious cheese pizza with fresh toppings.",
                            IsAvailable = true,
                            Name = "Pizza",
                            Price = 12.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            Description = "Juicy beef burger with lettuce and tomato.",
                            IsAvailable = true,
                            Name = "Burger",
                            Price = 8.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45813"),
                            Description = "Creamy Alfredo pasta with grilled chicken.",
                            IsAvailable = true,
                            Name = "Pasta Alfredo",
                            Price = 10.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45814"),
                            Description = "Crisp romaine lettuce with Caesar dressing, croutons, and parmesan.",
                            IsAvailable = true,
                            Name = "Caesar Salad",
                            Price = 6.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45815"),
                            Description = "Assorted sushi rolls with fresh fish and vegetables.",
                            IsAvailable = true,
                            Name = "Sushi Platter",
                            Price = 14.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45816"),
                            Description = "Fresh salmon fillet grilled to perfection with lemon butter.",
                            IsAvailable = true,
                            Name = "Grilled Salmon",
                            Price = 13.49m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45817"),
                            Description = "Spicy chicken tacos served with salsa and sour cream.",
                            IsAvailable = true,
                            Name = "Chicken Tacos",
                            Price = 9.49m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45818"),
                            Description = "Mixed vegetables sautéed with soy sauce and garlic.",
                            IsAvailable = true,
                            Name = "Vegetable Stir-Fry",
                            Price = 8.49m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45819"),
                            Description = "Tender pork ribs glazed with smoky BBQ sauce.",
                            IsAvailable = true,
                            Name = "BBQ Ribs",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45820"),
                            Description = "Warm tomato soup served with a slice of toasted bread.",
                            IsAvailable = true,
                            Name = "Tomato Soup",
                            Price = 5.49m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45821"),
                            Description = "Classic fried rice with egg, vegetables, and soy sauce.",
                            IsAvailable = true,
                            Name = "Fried Rice",
                            Price = 7.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45822"),
                            Description = "Juicy grilled steak served with mashed potatoes.",
                            IsAvailable = true,
                            Name = "Steak",
                            Price = 18.99m
                        },
                        new
                        {
                            Id = new Guid("a9063d88-88c6-40db-a7e9-868afeb45823"),
                            Description = "Fluffy pancakes served with maple syrup and berries.",
                            IsAvailable = true,
                            Name = "Pancakes",
                            Price = 6.49m
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.FoodOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("FoodOrders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2961"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Description = "Order 1",
                            OrderDate = new DateTime(2025, 6, 7, 20, 4, 18, 960, DateTimeKind.Local).AddTicks(88),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2962"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Description = "Order 2",
                            OrderDate = new DateTime(2025, 6, 7, 20, 4, 18, 960, DateTimeKind.Local).AddTicks(1116),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2963"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            Description = "Late night snacks",
                            OrderDate = new DateTime(2025, 6, 7, 18, 4, 18, 960, DateTimeKind.Local).AddTicks(1134),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca23"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2964"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            Description = "Lunch order",
                            OrderDate = new DateTime(2025, 6, 6, 20, 4, 18, 960, DateTimeKind.Local).AddTicks(1152),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca24"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2965"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Description = "Dinner special",
                            OrderDate = new DateTime(2025, 6, 7, 20, 4, 18, 960, DateTimeKind.Local).AddTicks(1158),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca25"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2966"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            Description = "Dinner",
                            OrderDate = new DateTime(2025, 6, 4, 20, 4, 18, 960, DateTimeKind.Local).AddTicks(1162),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca33"),
                            Status = 2
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.JoinEntities.EventRegistration", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRegistrations");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("5a6da81a-74a0-4d50-8cac-fea2f7897731"),
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            NumberOfParticipants = 2
                        },
                        new
                        {
                            EventId = new Guid("7c8da81a-74a0-4d50-8cac-fea2f7897733"),
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            NumberOfParticipants = 1
                        },
                        new
                        {
                            EventId = new Guid("8d9da81a-74a0-4d50-8cac-fea2f7897734"),
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            NumberOfParticipants = 3
                        },
                        new
                        {
                            EventId = new Guid("8d9da81a-74a0-4d50-8cac-fea2f7897734"),
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            NumberOfParticipants = 2
                        },
                        new
                        {
                            EventId = new Guid("9e0da81a-74a0-4d50-8cac-fea2f7897735"),
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            NumberOfParticipants = 1
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.JoinEntities.FoodOrderFood", b =>
                {
                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("FoodId", "FoodOrderId");

                    b.HasIndex("FoodOrderId");

                    b.ToTable("FoodOrderFoods", (string)null);

                    b.HasData(
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45811"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2961"),
                            Quantity = 2
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2961"),
                            Quantity = 1
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45813"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2962"),
                            Quantity = 3
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45814"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2963"),
                            Quantity = 1
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45815"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2963"),
                            Quantity = 2
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45816"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2964"),
                            Quantity = 1
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2965"),
                            Quantity = 1
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45819"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2965"),
                            Quantity = 2
                        },
                        new
                        {
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45823"),
                            FoodOrderId = new Guid("41d65c90-de3e-49be-8802-8cbc5b4e2966"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FoodId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7291"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Excellent service and clean room!",
                            Rating = 9,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(6989),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21")
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7292"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Pretty decent pizza",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45811"),
                            Rating = 7,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7472)
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7293"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Average experience, could be better.",
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7491),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22")
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7294"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            Comment = "Great burger, will order again!",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45812"),
                            Rating = 8,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7497)
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7295"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            Comment = "Absolutely loved the view and comfort!",
                            Rating = 10,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7507),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca23")
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7296"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            Comment = "Room was okay, but a bit noisy.",
                            Rating = 6,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7511),
                            RoomId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca24")
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7297"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            Comment = "Loved the creamy Alfredo sauce!",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45813"),
                            Rating = 9,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7515)
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7298"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            Comment = "Tasty salad, but could use more dressing.",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45814"),
                            Rating = 7,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7519)
                        },
                        new
                        {
                            Id = new Guid("4aef3307-19ee-4b61-8efa-8828279e7299"),
                            ApplicationUserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            Comment = "Fries were soggy and under-seasoned.",
                            FoodId = new Guid("a9063d88-88c6-40db-a7e9-868afeb45815"),
                            Rating = 4,
                            ReviewDate = new DateTime(2025, 6, 7, 20, 4, 18, 961, DateTimeKind.Local).AddTicks(7523)
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21"),
                            Description = "Room 101",
                            RoomNumber = "101",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22"),
                            Description = "Room 102",
                            RoomNumber = "102",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b52")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca23"),
                            Description = "Room 103",
                            RoomNumber = "103",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b53")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca24"),
                            Description = "Room 104",
                            RoomNumber = "104",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b54")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca25"),
                            Description = "Room 105",
                            RoomNumber = "105",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca26"),
                            Description = "Room 106",
                            RoomNumber = "106",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b52")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca27"),
                            Description = "Room 107",
                            RoomNumber = "107",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b53")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca28"),
                            Description = "Room 108",
                            RoomNumber = "108",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b54")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca29"),
                            Description = "Room 109",
                            RoomNumber = "109",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca30"),
                            Description = "Room 110",
                            RoomNumber = "110",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b52")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca31"),
                            Description = "Room 111",
                            RoomNumber = "111",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b53")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca32"),
                            Description = "Room 112",
                            RoomNumber = "112",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b54")
                        },
                        new
                        {
                            Id = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca33"),
                            Description = "Room 113",
                            RoomNumber = "113",
                            RoomTypeId = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51")
                        });
                });

            modelBuilder.Entity("HotelManagement.Models.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b51"),
                            Capacity = 1,
                            Description = "A cozy room for one person",
                            Name = "Single",
                            Price = 50.0m
                        },
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b52"),
                            Capacity = 2,
                            Description = "Comfortable for two guests",
                            Name = "Double",
                            Price = 90.0m
                        },
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b53"),
                            Capacity = 4,
                            Description = "Luxury suite with extra amenities",
                            Name = "Suite",
                            Price = 160.0m
                        },
                        new
                        {
                            Id = new Guid("fbf96b7e-04d2-4290-82e7-40a6f1c76b54"),
                            Capacity = 6,
                            Description = "Spacious room for families",
                            Name = "Family",
                            Price = 220.0m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b11"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b12"),
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b13"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b14"),
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b15"),
                            Name = "KitchenStaff",
                            NormalizedName = "KITCHENSTAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd291"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b11")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd292"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b13")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd293"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b14")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd294"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b12")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd295"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b15")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd296"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b11")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd297"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b11")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd298"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b14")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd299"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b14")
                        },
                        new
                        {
                            UserId = new Guid("67019a3d-04de-444b-bb6c-6ef934dcd29a"),
                            RoleId = new Guid("87600eb8-1da1-452a-a0bc-0d9c808b4b15")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomBookings", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("RoomBookings", (string)null);

                    b.HasData(
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611901"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611901"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca22")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611902"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca21")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611903"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca24")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611903"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca25")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611904"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca23")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611905"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca26")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611906"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca27")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611906"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca28")
                        },
                        new
                        {
                            BookingsId = new Guid("371c096d-5c0b-4929-aab5-1c0289611907"),
                            RoomsId = new Guid("a242ae42-b5f3-417e-9277-b89ac16fca33")
                        });
                });

            modelBuilder.Entity("EventStaff", b =>
                {
                    b.HasOne("HotelManagement.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManagement.Models.ActivityRecord", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ActivityRecords")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Room", "Room")
                        .WithMany("ActivityRecords")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Models.Booking", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Bookings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HotelManagement.Models.FoodOrder", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FoodOrders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Room", "Room")
                        .WithMany("FoodOrders")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Models.JoinEntities.EventRegistration", b =>
                {
                    b.HasOne("HotelManagement.Models.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.ApplicationUser", "User")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelManagement.Models.JoinEntities.FoodOrderFood", b =>
                {
                    b.HasOne("HotelManagement.Models.Food", "Food")
                        .WithMany("FoodOrderFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.FoodOrder", "FoodOrder")
                        .WithMany("FoodOrderFoods")
                        .HasForeignKey("FoodOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("FoodOrder");
                });

            modelBuilder.Entity("HotelManagement.Models.Review", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Food", "Food")
                        .WithMany("Reviews")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HotelManagement.Models.Room", "Room")
                        .WithMany("Reviews")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Food");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Models.Room", b =>
                {
                    b.HasOne("HotelManagement.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomBookings", b =>
                {
                    b.HasOne("HotelManagement.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManagement.Models.ApplicationUser", b =>
                {
                    b.Navigation("ActivityRecords");

                    b.Navigation("Bookings");

                    b.Navigation("EventRegistrations");

                    b.Navigation("FoodOrders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelManagement.Models.Event", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("HotelManagement.Models.Food", b =>
                {
                    b.Navigation("FoodOrderFoods");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelManagement.Models.FoodOrder", b =>
                {
                    b.Navigation("FoodOrderFoods");
                });

            modelBuilder.Entity("HotelManagement.Models.Room", b =>
                {
                    b.Navigation("ActivityRecords");

                    b.Navigation("FoodOrders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelManagement.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
