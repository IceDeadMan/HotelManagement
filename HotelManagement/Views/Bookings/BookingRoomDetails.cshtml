@model HotelManagement.ViewModels.BookingRoomDetailViewModel
@using HotelManagement.Enums
<!-- Booking Room Details View -->
<!-- This view displays the details of a specific room in a booking, including food orders, service requests, and reviews. -->
<!-- It provides all the functionality like ordering food,- services and reviewing the room. -->
@{
    ViewData["Title"] = "Room Details";
    var nights = (Model.Booking.EndDate - Model.Booking.StartDate).Days;
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}


<h2>Room @Model.Room.RoomNumber</h2>
<p><strong>Booking Period:</strong> @Model.Booking.StartDate.ToShortDateString() - @Model.Booking.EndDate.ToShortDateString() (@nights nights)</p>
<p><strong>Room Type:</strong> @Model.Room.RoomType?.Name, @Model.Room.RoomType?.Description</p>
<p><strong>Description:</strong> @Model.Room.Description</p>

<hr />

<h4>Food Orders During Stay</h4>
@if (Model.FoodOrders.Any())
{
    <ul>
        @foreach (var order in Model.FoodOrders)
        {
            <li>
                <strong>@order.OrderDate.ToShortDateString():</strong> @order.Description
                (Status: @order.Status)
            </li>
        }
    </ul>
}
else
{
    <p>No food orders placed during this stay.</p>
}
@if (Model.Booking.Status == BookingStatus.Confirmed)
{ 
    <a class="btn btn-primary mb-3"  asp-controller="Foods" asp-action="FoodMenu">Food Menu</a>
} else
{
    <p>You can only order food during your stay.</p>
}

<hr />

<h4>Service Requests</h4>
@if (Model.ActivityRecords.Any())
{
    <ul>
        @foreach (var activity in Model.ActivityRecords)
        {
            <li>
                <strong>@activity.Date.ToShortDateString():</strong> @activity.Type - @activity.Description
                (Status: @activity.Status)
            </li>
        }
    </ul>
}
else
{
    <p>No service activities recorded for this stay.</p>
}
@if (Model.Booking.Status == BookingStatus.Confirmed)
{
    <form id="add-activity-form" method="post">
        @Html.AntiForgeryToken()

        <label>Service Type</label>
        <div>
            @foreach (var type in Enum.GetValues(typeof(ActivityType)).Cast<ActivityType>())
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="Type" value="@type" required />
                    <label class="form-check-label">@type.ToString()</label>
                </div>
            }
        </div>

        <div class="mb-2">
            <label for="Description">Description</label>
            <textarea name="Description" class="form-control" required></textarea>
        </div>

        <!-- Hidden values -->
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />

        <button type="submit" class="btn btn-primary">Request Service</button>
    </form>
} else
{
    <p> You can only request services during your stay.</p>
}

<hr />


@if (Model.Review != null)
{
    <h4>You already reviewd this room. You can update your Review here</h4>
    <form id="edit-review-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <input type="hidden" name="ReviewId" value="@Model.Review.Id" />
        <div class="mb-2">
            <label for="Rating">Rating (out of 10)</label>
            <input type="number" name="Rating" value="@Model.Review.Rating" class="form-control" min="1" max="10" required />
        </div>
        <div class="mb-2">
            <label for="Comment">Comment</label>
            <textarea name="Comment" class="form-control">@Model.Review.Comment</textarea>
        </div>
        <button type="submit" class="btn btn-primary">Update Review</button>
    </form>
}
else
{
    <h4>Add a Review for this Room</h4>
    <form id="add-review-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <div class="mb-2">
            <label for="Rating">Rating (out of 10)</label>
            <input type="number" name="Rating" class="form-control" min="1" max="10" required />
        </div>
        <div class="mb-2">
            <label for="Comment">Comment</label>
            <textarea name="Comment" class="form-control"></textarea>
        </div>
        <button type="submit" class="btn btn-success">Submit Review</button>
    </form>
}

<a class="btn btn-secondary mt-3" asp-action="BookingDetails" asp-route-id="@Model.Booking.Id">Back to Booking</a>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
        function handleFormSubmit(e, url, method = "POST") {
            e.preventDefault();

            const form = e.target;
            const formData = new FormData(form);
            const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(url, {
                method: method,
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) throw new Error("Network response was not OK");
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    window.location.reload(); // Or dynamically update the activity list here
                } else {
                    alert("Something went wrong");
                }
            })
            .catch(error => {
                console.error("Error submitting form:", error);
                alert("Failed to submit");
            });
        }

        const addReviewForm = document.getElementById("add-review-form");
        const editReviewForm = document.getElementById("edit-review-form");
        const addActivityForm = document.getElementById("add-activity-form");

        if (addReviewForm) {
            addReviewForm.addEventListener("submit", e => handleFormSubmit(e, '@Url.Action("AddRoomReview", "Reviews")'), 'POST');
        }

        if (editReviewForm) {
            editReviewForm.addEventListener("submit", e => handleFormSubmit(e, '@Url.Action("EditRoomReview", "Reviews")'), 'PUT');
        }

        if (addActivityForm) {
            addActivityForm.addEventListener("submit", e => handleFormSubmit(e, '@Url.Action("Add", "ActivityRecords")'), 'POST');
        }
    });
    </script>
}
