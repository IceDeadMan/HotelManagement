@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model HotelManagement.ViewModels.BookingRoomDetailViewModel
@using HotelManagement.Enums
@using System.Globalization;

<!-- Booking Room Details View -->
<!-- This view displays the details of a specific room in a booking, including food orders, service requests, and reviews. -->
<!-- It provides all the functionality like ordering food,- services and reviewing the room. -->
@{
    ViewData["Title"] = Localizer["RoomDetails"];
    var nights = (Model.Booking.EndDate - Model.Booking.StartDate).Days;
}

<h2>@Localizer["Room"] @Model.Room.RoomNumber</h2>
<p><strong>@Localizer["BookingPeriod"]:</strong> @Model.Booking.StartDate.ToString("dd.MM.yyyy") - @Model.Booking.EndDate.ToString("dd.MM.yyyy") (@nights @Localizer["Nights"])</p>
<p><strong>@Localizer["RoomType"]:</strong> @Model.Room.RoomType?.Name, @Model.Room.RoomType?.Description</p>
<p><strong>@Localizer["Description"]:</strong> @Model.Room.Description</p>

<hr />

<h4>@Localizer["FoodOrdersDuringStay"]</h4>
@if (Model.FoodOrders.Any())
{
    <ul>
        @foreach (var order in Model.FoodOrders)
        {
            <li>
                <strong>@order.OrderDate.ToString("dd.MM.yyyy"):</strong> @order.Description <span class="@(order.Status switch {
                OrderStatus.Pending => "status-pending",
                OrderStatus.InProgress => "status-in-progress",
                OrderStatus.Completed => "status-completed",
                OrderStatus.Cancelled => "status-cancelled",
                _ => ""
            })"> - @order.Status</span>
                <ul class="list-unstyled mb-0">
                    @foreach (var food in order.FoodOrderFoods)
                    {
                        <li>@food.Food.Name - @food.Quantity x @food.Food.Price.ToString("N2", CultureInfo.InvariantCulture) €</li>
                    }
                </ul>
            </li>
        }
    </ul>
}
else
{
    <p>@Localizer["NoFoodOrders"]</p>
}
@if (Model.Booking.Status == BookingStatus.Confirmed)
{
    <a class="btn btn-primary mb-3" asp-controller="Foods" asp-action="FoodMenu">@Localizer["FoodMenu"]</a>
} else
{
    <p>@Localizer["CanOrder"]</p>
}

<hr />

<h4>@Localizer["ServiceRequests"]</h4>
@if (Model.ActivityRecords.Any())
{
    <ul>
        @foreach (var activity in Model.ActivityRecords)
        {
            <li>
                <strong>@activity.Date.ToString("dd.MM.yyyy"):</strong> @activity.Type - @activity.Description
                <span class="@(activity.Status switch {
                ActivityStatus.Planned => "status-planned",
                ActivityStatus.InProgress => "status-in-progress",
                ActivityStatus.Completed => "status-completed",
                _ => ""
            })"> - @activity.Status</span>
            </li>
        }
    </ul>
}
else
{
    <p>@Localizer["NoService"]</p>
}
@if (Model.Booking.Status == BookingStatus.Confirmed)
{
    <form id="add-activity-form" method="post">
        @Html.AntiForgeryToken()

        <label>@Localizer["ServiceType"]</label>
        <div>
            @foreach (var type in Enum.GetValues(typeof(ActivityType)).Cast<ActivityType>())
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="Type" value="@type" required />
                    <label class="form-check-label">@type.ToString()</label>
                </div>
            }
        </div>

        <div class="mb-2">
            <label for="Description">@Localizer["Description"]</label>
            <textarea name="Description" class="form-control" required></textarea>
        </div>

        <!-- Hidden values -->
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />

        <button type="submit" class="btn btn-primary">@Localizer["RequestService"]</button>
    </form>
} else
{
    <p>@Localizer["CanRequest"]</p>
}

<hr />


@if (Model.Review != null)
{
    <h4>@Localizer["AlreadyReviewed"]</h4>
    <form id="edit-review-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <input type="hidden" name="ReviewId" value="@Model.Review.Id" />
        <div class="mb-2">
            <label for="Rating">@Localizer["Rating"]</label>
            <input type="number" name="Rating" value="@Model.Review.Rating" class="form-control" min="1" max="10" required />
        </div>
        <div class="mb-2">
            <label for="Comment">@Localizer["Comment"]</label>
            <textarea name="Comment" class="form-control">@Model.Review.Comment</textarea>
        </div>
        <button type="submit" class="btn btn-primary">@Localizer["UpdateReview"]</button>
    </form>
}
else
{
    <h4>@Localizer["AddReview"]</h4>
    <form id="add-review-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <div class="mb-2">
            <label for="Rating">@Localizer["Rating"]</label>
            <input type="number" name="Rating" class="form-control" min="1" max="10" required />
        </div>
        <div class="mb-2">
            <label for="Comment">@Localizer["Comment"]</label>
            <textarea name="Comment" class="form-control"></textarea>
        </div>
        <button type="submit" class="btn btn-success">@Localizer["SubmitReview"]</button>
    </form>
}

<a class="btn btn-secondary mt-3" asp-action="BookingDetails" asp-route-id="@Model.Booking.Id">@Localizer["BackToBooking"]</a>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
        function handleFormSubmit(e, url, method = "POST") {
            e.preventDefault();

            const form = e.target;
            const formData = new FormData(form);
            const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(url, {
                method: method,
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) throw new Error("Network response was not OK");
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    window.location.reload(); // Or dynamically update the activity list here
                } else {
                    alert("Something went wrong");
                }
            })
            .catch(error => {
                console.error("Error submitting form:", error);
                alert("Failed to submit");
            });
        }

        const addReviewForm = document.getElementById("add-review-form");
        const editReviewForm = document.getElementById("edit-review-form");
        const addActivityForm = document.getElementById("add-activity-form");

        if (addReviewForm) {
            addReviewForm.addEventListener("submit", e => handleFormSubmit(e, '@Url.Action("AddRoomReview", "Reviews")'), 'POST');
        }

        if (editReviewForm) {
            editReviewForm.addEventListener("submit", e => handleFormSubmit(e, '@Url.Action("EditRoomReview", "Reviews")'), 'POST');
        }

        if (addActivityForm) {
            addActivityForm.addEventListener("submit", e => handleFormSubmit(e, '@Url.Action("Add", "ActivityRecords")'), 'POST');
        }
    });
    </script>
}
