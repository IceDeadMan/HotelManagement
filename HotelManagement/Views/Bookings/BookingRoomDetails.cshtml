@model HotelManagement.ViewModels.BookingRoomDetailViewModel
<!-- Booking Room Details View -->
<!-- This view displays the details of a specific room in a booking, including food orders, service requests, and reviews. -->
<!-- It provides all the functionality like ordering food,- services and reviewing the room. -->
@{
    ViewData["Title"] = "Room Details";
    var nights = (Model.Booking.EndDate - Model.Booking.StartDate).Days;
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}


<h2>Room @Model.Room.RoomNumber</h2>
<p><strong>Booking Period:</strong> @Model.Booking.StartDate.ToShortDateString() - @Model.Booking.EndDate.ToShortDateString() (@nights nights)</p>
<p><strong>Room Type:</strong> @Model.Room.RoomType?.Name</p>
<p><strong>Description:</strong> @Model.Room.Description</p>

<hr />

<h4>Food Orders During Stay</h4>
@if (Model.FoodOrders.Any())
{
    <ul>
        @foreach (var order in Model.FoodOrders)
        {
            <li>
                <strong>@order.OrderDate.ToShortDateString():</strong> @order.Description
                (Status: @order.Status)
            </li>
        }
    </ul>
}
else
{
    <p>No food orders placed during this stay.</p>
}

<hr />

<h4>Service Requests</h4>
@if (Model.ActivityRecords.Any())
{
    <ul>
        @foreach (var activity in Model.ActivityRecords)
        {
            <li>
                <strong>@activity.Date.ToShortDateString():</strong> @activity.Type - @activity.Description
                (Status: @activity.Status)
            </li>
        }
    </ul>
}
else
{
    <p>No service activities recorded for this stay.</p>
}

<hr />

<h4>Your Review</h4>
@if (Model.Review != null)
{
    <form id="edit-review-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <input type="hidden" name="ReviewId" value="@Model.Review.Id" />
        <div class="mb-2">
            <label for="Rating">Rating (out of 10)</label>
            <input type="number" name="Rating" value="@Model.Review.Rating" class="form-control" min="1" max="10" required />
        </div>
        <div class="mb-2">
            <label for="Comment">Comment</label>
            <textarea name="Comment" class="form-control">@Model.Review.Comment</textarea>
        </div>
        <button type="submit" class="btn btn-primary">Update Review</button>
    </form>
}
else
{
    <form id="add-review-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="RoomId" value="@Model.Room.Id" />
        <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
        <div class="mb-2">
            <label for="Rating">Rating (out of 10)</label>
            <input type="number" name="Rating" class="form-control" min="1" max="10" required />
        </div>
        <div class="mb-2">
            <label for="Comment">Comment</label>
            <textarea name="Comment" class="form-control"></textarea>
        </div>
        <button type="submit" class="btn btn-success">Submit Review</button>
    </form>
}

<a class="btn btn-secondary mt-3" asp-action="BookingDetails" asp-route-id="@Model.Booking.Id">Back to Booking</a>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            function handleReviewSubmit(e, url) {
                e.preventDefault();

                const form = e.target;
                const formData = new FormData(form);
                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(url, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': token
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error("Network response was not OK");
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        //alert(data.message);
                        window.location.reload(); // Reload to see the updated review
                    } else {
                        alert("Something went wrong");
                    }
                })
                .catch(error => {
                    console.error("Error submitting review:", error);
                    alert("Failed to submit review");
                });
            }


            const addForm = document.getElementById("add-review-form");
            const editForm = document.getElementById("edit-review-form");

            if (addForm) {
                addForm.addEventListener("submit", e => handleReviewSubmit(e, '@Url.Action("AddRoomReview", "Bookings")'));
            }

            if (editForm) {
                editForm.addEventListener("submit", e => handleReviewSubmit(e, '@Url.Action("EditRoomReview", "Bookings")'));
            }
        });
    </script>
}
