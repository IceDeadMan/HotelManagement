@model List<HotelManagement.ViewModels.ActivityRecordViewModel>
@using HotelManagement.Enums;
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
<!-- Service Activity Records List View -->
<!-- This view displays a list of service activity records made by guests. -->
<!-- Staff can update the status of activities. -->
@{
    ViewData["Title"] = Localizer["ServiceActivityRecords"];
}

<div class="container mt-4">
    <h2>@Localizer["ServiceActivityRequests"]</h2>
    @Html.AntiForgeryToken()
    <table class="table table-bordered table-striped mt-3">
        @{
            var currentSort = Context.Request.Query["sortBy"];
            var currentDir = Context.Request.Query["sortDir"];
            string GetSortDir(string field) => (currentSort == field && currentDir == "asc") ? "desc" : "asc";
        }

        <thead class="table-dark">
            <tr>
                <th><a class="text-white" asp-action="ActivityRecordsList" asp-route-sortBy="GuestName" asp-route-sortDir="@GetSortDir("GuestName")">@Localizer["ActivityRecordsGuest"]</a></th>
                <th><a class="text-white" asp-action="ActivityRecordsList" asp-route-sortBy="RoomNumber" asp-route-sortDir="@GetSortDir("RoomNumber")">@Localizer["ActivityRecordsRoom"]</a></th>
                <th><a class="text-white" asp-action="ActivityRecordsList" asp-route-sortBy="Type" asp-route-sortDir="@GetSortDir("Type")">@Localizer["ActivityRecordsType"]</a></th>
                <th>@Localizer["ActivityRecordsDescription"]</th> <!-- optional to sort -->
                <th><a class="text-white" asp-action="ActivityRecordsList" asp-route-sortBy="Date" asp-route-sortDir="@GetSortDir("Date")">@Localizer["ActivityRecordsDate"]</a></th>
                <th><a class="text-white" asp-action="ActivityRecordsList" asp-route-sortBy="Status" asp-route-sortDir="@GetSortDir("Status")">@Localizer["ActivityRecordsStatus"]</a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Model)
            {
                <tr data-activity-id="@activity.Id">
                    <td class="align-middle">@activity.GuestName</td>
                    <td class="align-middle">@activity.RoomNumber</td>
                    <td class="align-middle">@activity.Type</td>
                    <td class="align-middle">@activity.Description</td>
                    <td class="align-middle">@activity.Date.ToString("dd.MM.yyyy")</td>

                    <!-- AJAX Status Buttons -->
                    <td>
                        <div class="d-flex flex-column gap-1 activity-status-group" data-id="@activity.Id">
                            @foreach (ActivityStatus status in Enum.GetValues(typeof(ActivityStatus)))
                            {
                                var statusStr = status.ToString().ToLower(); // lowercase for CSS
                                var isChecked = status == activity.Status;
                                var btnClass = isChecked
                                    ? $"btn btn-sm rounded-pill w-100 status-btn-{statusStr}"
                                    : $"btn btn-sm rounded-pill w-100 status-btn-outline-{statusStr}";

                                <button type="button"
                                        class="@btnClass status-btn"
                                        data-status="@statusStr"
                                        data-current="@(isChecked.ToString().ToLower())">
                                    @Localizer[status.ToString()]
                                </button>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    @* AJAX script for changing the status of activity record*@
<script>
    document.querySelectorAll('.status-btn').forEach(button => {
        button.addEventListener('click', async function () {
            const activityId = this.closest('.activity-status-group').dataset.id;
            const newStatus = this.dataset.status;
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            try {
                const formData = new URLSearchParams();
                formData.append('status', newStatus);

                const response = await fetch(`/ActivityRecords/UpdateStatus/${activityId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token,
                    },
                    body: formData.toString()
                });

                if (response.ok) {
                    const group = this.closest('.activity-status-group');
                    const buttons = group.querySelectorAll('.status-btn');

                    buttons.forEach(btn => {
                        const status = btn.dataset.status.toLowerCase();

                        // Remove both filled and outline classes
                        btn.classList.remove(`status-btn-${status}`);
                        btn.classList.remove(`status-btn-outline-${status}`);

                        // Apply outline style to all
                        btn.classList.add(`status-btn-outline-${status}`);
                    });

                    const currentStatus = this.dataset.status.toLowerCase();

                    // Highlight the clicked button with the filled style
                    this.classList.remove(`status-btn-outline-${currentStatus}`);
                    this.classList.add(`status-btn-${currentStatus}`);
                } else {
                    console.error('Failed to update status');
                }
            } catch (err) {
                console.error('Error:', err);
            }
        });
    });
</script>
}
