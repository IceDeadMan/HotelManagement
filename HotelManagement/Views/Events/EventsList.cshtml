@model HotelManagement.ViewModels.EventListViewModel
@using Microsoft.AspNetCore.Identity
@using HotelManagement.Models
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<!-- Event List View -->
<!-- This view displays a list of events and allows admins/staff to create/delete new events. -->
<!-- Users can attend events. -->
@{
    ViewData["Title"] = "Events List";
    var isAdmin = Model.IsManager;
    var isStaff = User.IsInRole("Staff");
    var currentUserId = Model.CurrentUserId;
}

<h3>Events List</h3>
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}

<div class="container">
    <div class="row row-cols-1 row-cols-md-3 g-4">

        @* --- Create Event Card (Admin Only) --- *@
        @if (isAdmin)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-success">
                    <div class="card-body">
                        <form asp-action="CreateEvent" method="post">
                            <h5 class="card-title text-success">Create New Event</h5>

                            <div class="mb-2">
                                <input type="text" name="Name" class="form-control" placeholder="Event Name" required />
                            </div>
                            <div class="mb-2">
                                <textarea name="Description" class="form-control" placeholder="Description" required></textarea>
                            </div>
                            <div class="mb-2">
                                <input type="date" name="DatePart" class="form-control" required />
                            </div>
                            <div class="mb-2">
                                <input type="time" name="TimePart" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <input type="number" name="Capacity" class="form-control" placeholder="Capacity" min="1" required />
                            </div>

                            <button type="submit" class="btn btn-success w-100">Create Event</button>
                        </form>
                    </div>
                </div>
            </div>
        }

        @* --- Existing Events --- *@
        @foreach (var eventItem in Model.Events)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@eventItem.Event.Name</h5>
                        <p class="card-text">@eventItem.Event.Description</p>
                        <hr />
                        <p><strong>Date:</strong> @eventItem.Event.Date.ToString("dd/MM/yyyy")</p>
                        <p><strong>Time:</strong> @eventItem.Event.Date.ToString("HH:mm")</p>
                        <p><strong>Free spots:</strong> @(@eventItem.Event.Capacity - eventItem.TotalRegisteredParticipants) / @eventItem.Event.Capacity</p>
                        @if ((isAdmin || isStaff) && eventItem.Event.StaffMembers != null && eventItem.Event.StaffMembers.Any())
                        {
                            <p><strong>Assigned Staff:</strong></p>
                            <ul>
                                @foreach (var staff in eventItem.Event.StaffMembers)
                                {
                                    <li>@staff.UserName</li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="card-footer bg-transparent border-top-0 d-flex justify-content-between">
                        @if (SignInManager.IsSignedIn(User))
                        {
                            
                            @if (eventItem.IsUserRegistered)
                            {
                                <form asp-action="UnregisterFromEvent" method="post" class="d-inline">
                                    <input type="hidden" name="eventId" value="@eventItem.Event.Id" />
                                    <button type="submit" class="btn btn-warning">Cancel Attendance</button>
                                </form>
                            }
                            else if (eventItem.TotalRegisteredParticipants < eventItem.Event.Capacity)
                            {
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#registerModal-@eventItem.Event.Id">Attend</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary" disabled>Full</button>
                            }
                        }
                        else
                        {
                            <span class="text-muted">Login to register</span>
                        }
                        @if (isAdmin)
                        {
                            <button class="btn btn-outline-secondary ms-2" data-bs-toggle="modal" data-bs-target="#assignStaffModal-@eventItem.Event.Id">Assign Staff</button>
                        }
                        @if (isAdmin)
                        {
                            <form asp-action="DeleteEvent" asp-route-id="@eventItem.Event.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this event?');">
                                <button type="submit" class="btn btn-outline-danger">Delete</button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        }
        @foreach (var eventItem in Model.Events)
        {
            @await Html.PartialAsync("_EventRegisterModal", eventItem)
            @if (isAdmin)
            {
                @await Html.PartialAsync("_AssignStaffModal", eventItem)
            }
        }
    </div>
</div>

        