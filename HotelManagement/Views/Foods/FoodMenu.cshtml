@model HotelManagement.ViewModels.FoodOrderCreateViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<!-- Food List View -->
<!-- This view displays a list of food items and allows admins/kitchenstaff to create/delete new food items. -->
<!-- Users can order food items. -->
@{
    ViewData["Title"] = "Food Menu";
    var isAdmin = User.IsInRole("Manager") || User.IsInRole("KitchenStaff");

}

<h3>Food Menu</h3>

<div class="container">
    <!-- Order Creation Form -->
   @if (Model.AvailableRooms.Any())
    {
        <div class="card border-primary shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title text-primary">Create Food Order</h5>
                <form id="food-order-form" method="post" asp-action="CreateOrder" asp-controller="FoodOrders">
                    @Html.AntiForgeryToken()

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="roomSelect" class="form-label">Select Room</label>
                            <select id="roomSelect" name="SelectedRoomId" class="form-select" required>
                                <option value="">-- Choose Room --</option>
                                @foreach (var room in Model.AvailableRooms)
                                {
                                    <option value="@room.Id">Room @room.RoomNumber</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="orderDescription" class="form-label">Description</label>
                            <textarea id="orderDescription" name="Description" class="form-control" rows="2" required></textarea>
                        </div>
                    </div>

                    <h6>Selected Foods</h6>
                    <ul class="list-group mb-3" id="selected-foods-list"></ul>

                    <!-- Hidden inputs for selected food IDs -->
                    <div id="foodInputs"></div>

                    <button type="submit" class="btn btn-success">Place Order</button>
                </form>
            </div>
        </div>
    }
    else
    {
        <!-- Info Message -->
        <div class="alert alert-info shadow-sm">
            If you stay at our hotel, you can order food from the menu.
        </div>
    }

    @* Admin Create Form *@
    @if (isAdmin)
    {
        <div class="card mb-4 border-success shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-success">Add New Food Item</h5>
                <form asp-action="CreateFood" method="post" class="row g-2">
                    <div class="col-md-4">
                        <input type="text" name="Name" class="form-control" placeholder="Food Name" required />
                    </div>
                    <div class="col-md-4">
                        <input type="text" name="Description" class="form-control" placeholder="Description" required />
                    </div>
                    <div class="col-md-2">
                        <input type="number" name="Price" class="form-control" placeholder="Price" step="0.01" min="0" required />
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-success w-100">Add</button>
                    </div>
                </form>
            </div>
        </div>
    }

    @* Food List Table *@
    <div class="table-responsive">
        <table class="table table-hover align-middle shadow-sm">
            <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th style="width: 300px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var food in Model.Foods.Where(f => isAdmin || f.IsAvailable))
                {
                    <tr>
                        <td>@food.Name</td>
                        <td>@food.Description</td>
                        <td>@food.Price.ToString("C")</td>
                        <td style="white-space: nowrap;">
                        <div class="d-inline-flex flex-nowrap gap-2">
                            <a class="btn btn-sm btn-outline-primary add-to-order-btn @(food.IsAvailable ? "" : "disabled disabled-btn")"
                            data-food-id="@food.Id"
                            data-food-name="@food.Name">
                            Add to Order
                            </a>
                            <button class="btn btn-sm btn-outline-secondary"
                                    data-bs-toggle="modal"
                                    data-bs-target="#foodReviewModal-@food.Id">
                                Reviews
                            </button>

                            @if (isAdmin)
                            {
                                <form asp-action="DeleteFood"
                                    asp-route-id="@food.Id"
                                    method="post"
                                    onsubmit="return confirm('Delete this food item?');"
                                    class="mb-0">
                                    @Html.AntiForgeryToken()
                                    <button class="btn btn-sm btn-outline-danger">Delete</button>
                                </form>

                                <div class="form-check form-switch mb-0">
                                    <input class="form-check-input toggle-availability"
                                        type="checkbox"
                                        data-food-id="@food.Id"
                                        @(food.IsAvailable ? "checked" : "") />
                                    <label class="form-check-label">Available</label>
                                </div>
                            }
                        </div>

                        @await Html.PartialAsync("_FoodReviewModal", food)
                    </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
@*This script is for dynamic adding and removing foods from the Food Order form.*@    
<script>
    const selectedFoods = [];
    const selectedFoodList = document.getElementById("selected-foods-list");
    const foodInputs = document.getElementById("foodInputs");

    document.querySelectorAll(".add-to-order-btn").forEach(button => {
        button.addEventListener("click", () => {
            const foodId = button.getAttribute("data-food-id");
            const foodName = button.getAttribute("data-food-name");

            const foodEntry = {
                id: foodId,
                name: foodName
            };

            selectedFoods.push(foodEntry);
            updateFoodList();
        });
    });

    function updateFoodList() {
        selectedFoodList.innerHTML = "";
        foodInputs.innerHTML = "";

        selectedFoods.forEach((food, index) => {
            const li = document.createElement("li");
            li.className = "list-group-item d-flex justify-content-between align-items-center";

            li.innerHTML = `
                ${food.name}
                <button type="button" class="btn btn-sm btn-danger remove-btn" data-index="${index}">&times;</button>
            `;

            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = "SelectedFoodIds";
            hiddenInput.value = food.id;
            foodInputs.appendChild(hiddenInput);

            selectedFoodList.appendChild(li);
        });

        document.querySelectorAll(".remove-btn").forEach(button => {
            button.addEventListener("click", () => {
                const index = button.getAttribute("data-index");
                selectedFoods.splice(index, 1);
                updateFoodList();
            });
        });
    }
</script>
@*This script is for AJAX change of the food availability by the priviliged roles.*@
<script>
    document.querySelectorAll(".toggle-availability").forEach(toggle => {
        toggle.addEventListener("change", function () {
            const foodId = this.getAttribute("data-food-id");
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            fetch(`/Foods/ToggleAvailability?id=${foodId}`, {
                method: "PUT",
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) throw new Error("Network error");
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    const addBtn = document.querySelector(`.add-to-order-btn[data-food-id="${foodId}"]`);

                    if (data.isAvailable) {
                        addBtn.classList.remove("disabled", "disabled-btn");
                        addBtn.setAttribute("title", "");
                    } else {
                        addBtn.classList.add("disabled", "disabled-btn");
                        addBtn.setAttribute("title", "Not available right now");
                    }
                } else {
                    alert("Failed to update availability.");
                }
            })
            .catch(err => {
                alert("An error occurred while updating availability.");
                this.checked = !this.checked; // Revert the toggle
            });
        });
    });
</script>


}
